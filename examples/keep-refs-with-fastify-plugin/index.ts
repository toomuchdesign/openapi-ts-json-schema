import Fastify from 'fastify';
import { JsonSchemaToTsProvider } from '@fastify/type-provider-json-schema-to-ts';
import fastifySwagger from '@fastify/swagger';
import fastifySwaggerUI from '@fastify/swagger-ui';
import {
  RefSchemas,
  refSchemas,
  sharedSchemas,
} from './definitions/petstore/schemas-autogenerated/fastify-integration';

const fastify = Fastify({
  logger: true,
});

const server =
  fastify.withTypeProvider<
    JsonSchemaToTsProvider<{ references: RefSchemas }>
  >();

const start = async () => {
  try {
    await server.register(fastifySwagger, {
      openapi: {
        info: {
          title: 'Test swagger',
          version: '0.1.0',
        },
        servers: [
          {
            url: 'http://localhost',
          },
        ],
      },
    });

    await fastify.register(fastifySwaggerUI, {
      routePrefix: '/documentation',
    });

    // Register `$ref` schemas individually so that they `$ref`s get resolved runtime.
    refSchemas.forEach((schema) => {
      server.addSchema(schema);
    });

    // Register other schemas to let @fastify.swagger re-export them as shared openAPI components
    sharedSchemas.forEach((schema) => {
      server.addSchema(schema);
    });

    // Register route
    server.get('/pet', {
      schema: {
        params: {
          type: 'object',
          properties: {
            id: {
              type: 'integer',
            },
          },
          required: ['id'],
        },
        response: {
          200: { $ref: '/components/schemas/Pet#' },
        },
      } as const,
      handler: (req) => {
        // req.param is fully typed
        const { id } = req.params;
        // Return type type checked to fit schema.response[200] schema
        return {
          id,
          name: 'Pet name',
          tag: '3',
        };
      },
    });

    await server.listen({ port: 3000 });
  } catch (err) {
    server.log.error(err);
    process.exit(1);
  }
};

start();
