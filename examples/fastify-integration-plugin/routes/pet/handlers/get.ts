import type { FastifyPluginAsync } from 'fastify';
import { expectTypeOf } from 'expect-type';
import { getSchema, type GetSchema } from '../schema/get';

import type { JsonSchemaToTsProvider } from '@fastify/type-provider-json-schema-to-ts';
import type { FromSchema, JSONSchema } from 'json-schema-to-ts';
import type { RefSchemas } from '../../../definitions/petstore/schemas-autogenerated/fastify-integration';

// Enhance JsonSchema with generated OAS refs
export type FromSchemaWithRefs<Schema extends JSONSchema> = FromSchema<
  Schema,
  { references: RefSchemas }
>;

export const getRoute: FastifyPluginAsync = async (fastify) => {
  const server = fastify.withTypeProvider<
    JsonSchemaToTsProvider<{
      ValidatorSchemaOptions: {
        references: RefSchemas;
      };
      SerializerSchemaOptions: {
        references: RefSchemas;
      };
    }>
  >();

  server.get('/pet', {
    schema: getSchema,
    handler: (req) => {
      // req.param is fully typed
      // @NOTE VSC seems not to be able to type this while type TS check does
      const { id } = req.query;
      expectTypeOf(req.query).toEqualTypeOf<{
        id: number;
        [x: string]: unknown;
      }>();

      // Return type type checked to fit schema.response[200] schema
      const response: GetSchema['response']['200'] = [
        {
          id,
          name: 'Pet name',
          tag: 'tag',
        },
      ];

      return response;
    },
  });
};
