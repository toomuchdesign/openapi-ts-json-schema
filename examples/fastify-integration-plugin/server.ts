import Fastify from 'fastify';
import type { FromSchema, JSONSchema } from 'json-schema-to-ts';
import { JsonSchemaToTsProvider } from '@fastify/type-provider-json-schema-to-ts';
import fastifySwagger from '@fastify/swagger';
import fastifySwaggerUI from '@fastify/swagger-ui';
import {
  RefSchemas,
  schemas,
} from './definitions/petstore/schemas-autogenerated/fastify-integration';

type FromSchemaWithRefs<Schema extends JSONSchema> = FromSchema<
  Schema,
  { references: RefSchemas }
>;

export async function makeServer() {
  const fastify = Fastify({
    logger: true,
  });

  const server =
    fastify.withTypeProvider<
      JsonSchemaToTsProvider<{ references: RefSchemas }>
    >();

  await server.register(fastifySwagger, {
    openapi: {
      info: {
        title: 'Test swagger',
        version: '0.1.0',
      },
      servers: [
        {
          url: 'http://localhost',
        },
      ],
    },
    /**
     * Register schemas with $id "/components/schemas/xxx" under OpenAPI's "components.schemas"
     * https://github.com/fastify/fastify-swagger?tab=readme-ov-file#managing-your-refs
     */
    refResolver: {
      buildLocalReference: (json, baseUri, fragment, i) => {
        const OPEN_API_COMPONENTS_SCHEMAS_PATH = '/components/schemas/';
        if (
          typeof json.$id === 'string' &&
          json.$id.startsWith(OPEN_API_COMPONENTS_SCHEMAS_PATH)
        ) {
          return json.$id.replace(OPEN_API_COMPONENTS_SCHEMAS_PATH, '');
        }

        // @TODO Support naming component schemas different than "components.schema"
        return `def-${i}`;
      },
    },
  });

  await fastify.register(fastifySwaggerUI, {
    routePrefix: '/documentation',
  });

  // Register `$ref` schemas individually so that they can be resolved at runtime
  schemas.forEach((schema) => {
    server.addSchema(schema);
  });

  const routeSchema = {
    querystring: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
        },
      },
      required: ['id'],
    },
    response: {
      200: { $ref: '/components/schemas/Pets' },
    },
  } as const;

  type RouteSchema = {
    request: {
      query: FromSchemaWithRefs<typeof routeSchema.querystring>;
    };
    response: {
      200: FromSchemaWithRefs<(typeof routeSchema.response)[200]>;
    };
  };

  // Register route
  server.get('/pet', {
    schema: routeSchema,
    handler: (req) => {
      // req.param is fully typed
      const { id } = req.query;
      // Return type type checked to fit schema.response[200] schema
      const response: RouteSchema['response']['200'] = [
        {
          id,
          name: 'Pet name',
          tag: 'tag',
        },
      ];

      return response;
    },
  });

  return server;
}
