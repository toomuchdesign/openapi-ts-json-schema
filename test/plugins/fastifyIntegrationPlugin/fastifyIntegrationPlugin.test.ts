import path from 'path';
import fs from 'fs/promises';
import { describe, it, expect } from 'vitest';
import { openapiToTsJsonSchema, fastifyIntegrationPlugin } from '../../../src';
import { fixtures, makeTestOutputPath } from '../../test-utils';
import { formatTypeScript } from '../../../src/utils';

describe('fastifyIntegration plugin', () => {
  it('generates expected file', async () => {
    const { outputPath } = await openapiToTsJsonSchema({
      openApiSchema: path.resolve(fixtures, 'complex/specs.yaml'),
      outputPath: makeTestOutputPath('plugin-fastify'),
      definitionPathsToGenerateFrom: ['components.schemas', 'paths'],
      plugins: [fastifyIntegrationPlugin()],
      silent: true,
    });

    const actualAsText = await fs.readFile(
      path.resolve(outputPath, 'fastify-integration.ts'),
      {
        encoding: 'utf8',
      },
    );

    // @TODO find a better way to assert against generated types
    const expectedAsText = await formatTypeScript(`
      // File autogenerated by "openapi-ts-json-schema". Do not edit :)
      import componentsSchemasAnswer from "./components/schemas/Answer";
      import componentsSchemasJanuary from "./components/schemas/January";
      import componentsSchemasFebruary from "./components/schemas/February";
      import componentsSchemasMarch from "./components/schemas/March";

      // RefSchemas type: tuple of $ref schema types to enable json-schema-to-ts hydrate $refs via "references" option
      export type RefSchemas = [
        typeof componentsSchemasAnswer,
        typeof componentsSchemasJanuary,
        typeof componentsSchemasFebruary,
        typeof componentsSchemasMarch,
      ];

      // schemas: array of JSON schemas to be registered with "fastify.addSchema"
      export const schemas = [
        componentsSchemasAnswer,
        componentsSchemasJanuary,
        componentsSchemasFebruary,
        componentsSchemasMarch,
      ]`);

    expect(actualAsText).toBe(expectedAsText);

    // $ref schemas
    const answerSchema = await import(
      path.resolve(outputPath, 'components/schemas/Answer')
    );
    const januarySchema = await import(
      path.resolve(outputPath, 'components/schemas/January')
    );
    const februarySchema = await import(
      path.resolve(outputPath, 'components/schemas/February')
    );
    // non-$ref schemas
    const marchSchema = await import(
      path.resolve(outputPath, 'components/schemas/March')
    );

    const actual = await import(
      path.resolve(outputPath, 'fastify-integration')
    );

    expect(actual.schemas).toEqual([
      answerSchema.default,
      januarySchema.default,
      februarySchema.default,
      marchSchema.default,
    ]);
  });

  describe('"schemaFilter" option', () => {
    it('exposes only filtered schemas', async () => {
      const { outputPath } = await openapiToTsJsonSchema({
        openApiSchema: path.resolve(fixtures, 'complex/specs.yaml'),
        outputPath: makeTestOutputPath('plugin-fastify-schemaFilter-option'),
        definitionPathsToGenerateFrom: ['components.schemas', 'paths'],
        plugins: [
          fastifyIntegrationPlugin({
            schemaFilter: ({ id }) =>
              id.includes('January') || id.includes('March'),
          }),
        ],
        silent: true,
      });

      const actual = await import(
        path.resolve(outputPath, 'fastify-integration')
      );
      const januarySchema = await import(
        path.resolve(outputPath, 'components/schemas/January')
      );
      const marchSchema = await import(
        path.resolve(outputPath, 'components/schemas/March')
      );

      expect(actual.schemas).toEqual([
        januarySchema.default,
        marchSchema.default,
      ]);
    });
  });
});
