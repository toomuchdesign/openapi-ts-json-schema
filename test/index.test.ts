import path from 'path';
import { existsSync } from 'fs';
import { describe, it, expect } from 'vitest';
import { importFresh } from './utils';
import { openapiToTsJsonSchema } from '../src';

const fixtures = path.resolve(__dirname, 'fixtures');

describe('openapiToTsJsonSchema', async () => {
  it('Generates expected JSON schemas', async () => {
    const { outputFolder } = await openapiToTsJsonSchema({
      openApiSchema: path.resolve(fixtures, 'complex/specs.yaml'),
      definitionPathsToGenerateFrom: ['paths', 'components.months'],
      silent: true,
    });

    expect(outputFolder).toBe(
      path.resolve(fixtures, 'complex/schemas-autogenerated'),
    );

    const januarySchema = await importFresh(
      path.resolve(outputFolder, 'components.months/January.ts'),
    );
    const februarySchema = await importFresh(
      path.resolve(outputFolder, 'components.months/February'),
    );

    // definition paths get escaped
    const path1 = await importFresh(
      path.resolve(outputFolder, 'paths/v1|path-1'),
    );

    expect(januarySchema.default).toEqual({
      description: 'January description',
      type: 'object',
      required: ['isJanuary'],
      properties: {
        isJanuary: { type: ['string', 'null'], enum: ['yes', 'no', null] },
      },
    });

    expect(februarySchema.default).toEqual({
      description: 'February description',
      type: 'object',
      required: ['isFebruary'],
      properties: {
        isFebruary: { type: ['string', 'null'], enum: ['yes', 'no', null] },
      },
    });

    expect(path1.default).toEqual({
      get: {
        responses: {
          '200': {
            description: 'A description',
            content: {
              'application/json': {
                schema: {
                  oneOf: [
                    {
                      description: 'January description',
                      type: 'object',
                      required: ['isJanuary'],
                      properties: {
                        isJanuary: {
                          type: 'string',
                          nullable: true,
                          enum: ['yes', 'no'],
                        },
                      },
                    },
                    {
                      description: 'February description',
                      type: 'object',
                      required: ['isFebruary'],
                      properties: {
                        isFebruary: {
                          type: 'string',
                          nullable: true,
                          enum: ['yes', 'no'],
                        },
                      },
                    },
                  ],
                },
              },
            },
          },
        },
      },
    });
  });

  it('deletes previously generated schemas', async () => {
    const { outputFolder } = await openapiToTsJsonSchema({
      openApiSchema: path.resolve(fixtures, 'mini-referenced/specs.yaml'),
      definitionPathsToGenerateFrom: ['components.schemas'],
      silent: true,
    });

    const previouslyGeneratedSchematPath = path.resolve(
      outputFolder,
      'components.schemas',
      'Answer.ts',
    );

    expect(existsSync(previouslyGeneratedSchematPath)).toBe(true);

    await openapiToTsJsonSchema({
      openApiSchema: path.resolve(fixtures, 'mini-referenced/specs.yaml'),
      definitionPathsToGenerateFrom: ['components.months'],
      silent: true,
    });
  });

  describe('non existing openAPI definition file', async () => {
    it('throws expected error', async () => {
      await expect(() =>
        openapiToTsJsonSchema({
          openApiSchema: path.resolve(fixtures, 'does-not-exist.yaml'),
          silent: true,
        }),
      ).rejects.toThrow("Provided OpenAPI definition path doesn't exist:");
    });
  });
});
