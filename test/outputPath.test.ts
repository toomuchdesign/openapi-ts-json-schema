import path from 'path';
import fs from 'fs';
import { describe, it, expect } from 'vitest';
import { fixtures } from './test-utils';
import { openapiToTsJsonSchema } from '../src';

describe('"outputPath" option', () => {
  it('saves generated schemas to provided path', async () => {
    const customOutputPath = path.resolve(
      fixtures,
      'schemas-autogenerated-custom',
      'custom-path',
    );

    const { outputPath } = await openapiToTsJsonSchema({
      openApiSchema: path.resolve(fixtures, 'ref-property/specs.yaml'),
      definitionPathsToGenerateFrom: ['components.schemas'],
      outputPath: customOutputPath,
      silent: true,
    });

    expect(outputPath).toBe(customOutputPath);

    const expectedGeneratedSchemaPath = path.resolve(
      outputPath,
      'components/schemas',
      'Answer.ts',
    );
    expect(fs.existsSync(expectedGeneratedSchemaPath)).toBe(true);
  });

  describe('no value provided', () => {
    it('saves generated schemas in a "schemas-autogenerated" folder next to open api schema', async () => {
      const { outputPath } = await openapiToTsJsonSchema({
        openApiSchema: path.resolve(fixtures, 'ref-property/specs.yaml'),
        definitionPathsToGenerateFrom: ['components.schemas'],
        silent: true,
      });

      const expectedOutputPath = path.resolve(
        fixtures,
        'ref-property/schemas-autogenerated',
      );
      expect(outputPath).toBe(expectedOutputPath);

      const expectedGeneratedSchemaPath = path.resolve(
        expectedOutputPath,
        'components/schemas',
        'Answer.ts',
      );
      expect(fs.existsSync(expectedGeneratedSchemaPath)).toBe(true);
    });
  });
});
