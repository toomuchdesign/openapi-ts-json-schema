import type { Plugin } from '../types';
import { refToId } from '../utils';

const OUTPUT_FILE_NAME = 'fastify-integration.ts';

const fastifyIntegrationPlugin: Plugin<
  {
    includeNonRefSchemas?: ({ id }: { id: string }) => boolean;
  } | void
> = ({ includeNonRefSchemas = () => false } = {}) => ({
  onInit: async ({ options }) => {
    // Force "keep" refHandling
    options.refHandling = {
      strategy: 'keep',
      refMapper: ({ ref }) => {
        /**
         * Replace original $ref values with internal schema id which
         * the schema is registered with via Fastify's `addSchema`
         */
        return refToId(ref);
      },
    };
  },
  onBeforeGeneration: async ({ outputPath, metaData, options, utils }) => {
    // Derive the schema data necessary to generate the declarations
    const allSchemas = [...metaData.schemas]
      .map(([id, schema]) => schema)
      .map(({ absoluteImportPath, uniqueName, id, isRef }) => {
        return {
          importPath: utils.makeRelativeModulePath({
            fromDirectory: outputPath,
            to: absoluteImportPath,
          }),
          uniqueName,
          id,
          isRef,
        };
      });

    // Separate schemas used as $refs from the others
    const refSchemas = allSchemas.filter((schema) => schema.isRef);
    const nonRefSchemas = allSchemas.filter((schema) => !schema.isRef);
    const exportedSchemas = [
      ...refSchemas,
      ...nonRefSchemas.filter(({ id }) => includeNonRefSchemas({ id })),
    ];

    let output =
      '// File autogenerated by "openapi-ts-json-schema". Do not edit :)';

    // Generate JSON schemas import statements
    exportedSchemas.forEach((schema) => {
      output += `\n import ${schema.uniqueName} from "${schema.importPath}";`;
    });

    // Generate JSON schema objects with $id prop
    output += '\n\n';
    exportedSchemas.forEach((schema) => {
      // @NOTE schemas internal $refs should match the $id generated here
      output += `\n const ${schema.uniqueName}WithId = {...${schema.uniqueName}, $id: "${schema.id}"} as const;`;
    });

    // RefSchemas type: generate TS tuple TS type containing the types of all $ref JSON schema
    output += `\n\n
      // Allows json-schema-to-ts to hydrate $refs via the "references" option
      export type RefSchemas = [
        ${refSchemas
          .map((schema) => `typeof ${schema.uniqueName}WithId`)
          .join(',')}
      ];`;

    // schemas: generate an array of all $ref JSON schema to be registered with `fastify.addSchema`
    output += `\n\n
      // JSON schemas to be registered with "fastify.addSchema"
      export const schemas = [
        ${exportedSchemas.map((schema) => `${schema.uniqueName}WithId`).join(',')}
      ];`;

    // Format and save file
    const formattedOutput = await utils.formatTypeScript(output);
    await utils.saveFile({
      path: [outputPath, OUTPUT_FILE_NAME],
      data: formattedOutput,
    });
  },
});

export default fastifyIntegrationPlugin;
