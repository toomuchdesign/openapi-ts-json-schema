import type { Plugin } from '../types';

const OUTPUT_FILE_NAME = 'fastify-integration.ts';

const fastifyIntegrationPlugin: Plugin<
  {
    sharedSchemasFilter?: ({ id }: { id: string }) => boolean;
  } | void
> =
  ({ sharedSchemasFilter = () => false } = {}) =>
  async ({ outputPath, metaData, utils }) => {
    // Derive the schema data necessary to generate the declarations
    const allSchemas = [...metaData.schemas]
      .map(([id, schema]) => schema)
      .map(({ absoluteImportPath, uniqueName, id, isRef }) => {
        return {
          importPath: utils.makeRelativeModulePath({
            fromDirectory: outputPath,
            to: absoluteImportPath,
          }),
          uniqueName,
          id,
          isRef,
        };
      });

    // Separate schemas used as $refs from the others
    const refSchemas = allSchemas.filter((schema) => schema.isRef);
    const nonRefSchemas = allSchemas.filter((schema) => !schema.isRef);
    const sharedSchemas = nonRefSchemas.filter(({ id }) =>
      sharedSchemasFilter({ id }),
    );

    let output =
      '// File autogenerated with "openapi-ts-json-schema". Do not edit :)';

    // Generate JSON schemas import statements
    output += '\n';
    [...refSchemas, ...sharedSchemas].forEach((schema) => {
      output += `\n import ${schema.uniqueName} from "${schema.importPath}";`;
    });

    // Generate JSON schema objects with $id prop
    output += '\n\n';
    [...refSchemas, ...sharedSchemas].forEach((schema) => {
      output += `\n const ${schema.uniqueName}WithId = {...${schema.uniqueName}, $id: "${schema.id}"} as const;`;
    });

    // RefSchemas type: generate TS tuple TS type containing the types of all $ref JSON schema
    output += `\n\n
    // Allows json-schema-to-ts to hydrate $refs via the "references" option
    export type RefSchemas = [
      ${refSchemas
        .map((schema) => `typeof ${schema.uniqueName}WithId`)
        .join(',')}
    ];`;

    // refSchemas: generate an array of all $ref JSON schema to be registered with `fastify.addSchema`
    output += `\n\n
    // $ref JSON schemas to be registered with "fastify.addSchema"
    export const refSchemas = [
      ${refSchemas.map((schema) => `${schema.uniqueName}WithId`).join(',')}
    ];`;

    // sharedSchemas: generate an array of user-defined schemas to be registered with `fastify.addSchema`
    output += `\n\n
    // Extra JSON schemas to be registered with "fastify.addSchema"
    export const sharedSchemas = [
      ${sharedSchemas.map((schema) => `${schema.uniqueName}WithId`).join(',')}
    ];`;

    // Format and save file
    const formattedOutput = await utils.formatTypeScript(output);
    await utils.saveFile({
      path: [outputPath, OUTPUT_FILE_NAME],
      data: formattedOutput,
    });
  };

export default fastifyIntegrationPlugin;
