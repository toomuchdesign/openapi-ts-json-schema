import { existsSync } from 'fs';
import path from 'node:path';
import $RefParser from '@apidevtools/json-schema-ref-parser';
import get from 'lodash.get';
import {
  clearFolder,
  makeTsJsonSchemaFiles,
  REF_SYMBOL,
  convertOpenApiToJsonSchema,
  convertOpenApiPathsParameters,
  addSchemaToMetaData,
  pathToRef,
  formatTypeScript,
  saveFile,
  makeRelativeModulePath,
} from './utils';
import type {
  SchemaMetaDataMap,
  JSONSchema,
  ReturnPayload,
  Options,
} from './types';

export async function openapiToTsJsonSchema(
  options: Options,
): Promise<ReturnPayload> {
  const { plugins = [] } = options;

  // Execute plugins onInit method
  for (const { onInit } of plugins) {
    if (onInit) {
      await onInit({
        options,
      });
    }
  }

  const {
    openApiSchema: openApiSchemaRelative,
    definitionPathsToGenerateFrom,
    schemaPatcher,
    outputPath: providedOutputPath,
    silent,
    refHandling = 'import',
  } = options;

  if (definitionPathsToGenerateFrom.length === 0 && !silent) {
    console.log(
      `[openapi-ts-json-schema] ⚠️ No schemas will be generated since definitionPathsToGenerateFrom option is empty`,
    );
  }

  definitionPathsToGenerateFrom.forEach((defPath) => {
    if (path.isAbsolute(defPath)) {
      throw new Error(
        `[openapi-ts-json-schema] "definitionPathsToGenerateFrom" must be an array of relative paths. "${defPath}" found.`,
      );
    }
  });

  const openApiSchemaPath = path.resolve(openApiSchemaRelative);
  if (!existsSync(openApiSchemaPath)) {
    throw new Error(
      `[openapi-ts-json-schema] Provided OpenAPI definition path doesn't exist: ${openApiSchemaPath}`,
    );
  }

  const outputPath =
    providedOutputPath ??
    path.resolve(path.dirname(openApiSchemaPath), 'schemas-autogenerated');

  await clearFolder(outputPath);

  const schemaParser = new $RefParser();
  const bundledOpenApiSchema = await schemaParser.bundle(openApiSchemaPath);
  const initialJsonSchema = convertOpenApiToJsonSchema(bundledOpenApiSchema);

  const inlinedRefs: Map<string, JSONSchema> = new Map();
  const dereferencedJsonSchema = await schemaParser.dereference(
    initialJsonSchema,
    {
      dereference: {
        // @ts-expect-error onDereference seems not to be properly typed
        onDereference: (ref, inlinedSchema) => {
          // Keep track of inlined refs
          if (!inlinedRefs.has(ref)) {
            // Make a shallow copy of the ref schema to save it from the mutations below
            inlinedRefs.set(ref, { ...inlinedSchema });

            /**
             * "import" refHandling support:
             * mark inlined ref objects with a "REF_SYMBOL" to retrieve their
             * original $ref value once inlined
             */
            inlinedSchema[REF_SYMBOL] = ref;

            /**
             * "inline" refHandling support:
             * add a $ref comment to each inlined schema with the original ref value.
             * See: https://github.com/kaelzhang/node-comment-json
             */
            if (refHandling === 'inline') {
              inlinedSchema[Symbol.for('before')] = [
                {
                  type: 'LineComment',
                  value: ` $ref: "${ref}"`,
                },
              ];
            }
          }
        },
      },
    },
  );

  const jsonSchema = convertOpenApiPathsParameters(dereferencedJsonSchema);
  const schemaMetaDataMap: SchemaMetaDataMap = new Map();

  /**
   * Create meta data for $ref schemas which have been previously dereferenced.
   * It happens only with "import" and "keep" refHandling since they expect
   * $ref schemas to be generated no matter of
   */
  if (refHandling === 'import' || refHandling === 'keep') {
    for (const [ref, schema] of inlinedRefs) {
      addSchemaToMetaData({
        ref,
        schemaMetaDataMap,
        schema,
        outputPath,
        isRef: true,
      });
    }
  }

  /**
   * Create meta data for each output schema
   */
  for (const definitionPath of definitionPathsToGenerateFrom) {
    const definitionSchemas = get(jsonSchema, definitionPath);

    for (const schemaName in definitionSchemas) {
      // Create expected OpenAPI ref
      const ref = pathToRef({
        schemaRelativeDirName: definitionPath,
        schemaName,
      });

      addSchemaToMetaData({
        ref,
        schemaMetaDataMap,
        schema: definitionSchemas[schemaName],
        outputPath,
        isRef: inlinedRefs.has(ref),
      });
    }
  }

  const returnPayload: ReturnPayload = {
    outputPath,
    metaData: { schemas: schemaMetaDataMap },
  };

  // Execute plugins onBeforeGeneration method
  for (const { onBeforeGeneration } of plugins) {
    if (onBeforeGeneration) {
      await onBeforeGeneration({
        ...returnPayload,
        options,
        utils: { makeRelativeModulePath, formatTypeScript, saveFile },
      });
    }
  }

  // Generate schemas
  await makeTsJsonSchemaFiles({
    refHandling,
    schemaMetaDataMap,
    schemaPatcher,
  });

  if (!silent) {
    console.log(
      `[openapi-ts-json-schema] ✅ JSON schema models generated at ${outputPath}`,
    );
  }

  return returnPayload;
}
