import fs from 'fs/promises';
import { existsSync } from 'fs';
import path from 'path';
import $RefParser from '@apidevtools/json-schema-ref-parser';
import YAML from 'yaml';
import get from 'lodash.get';
import {
  clearFolder,
  makeJsonSchemaFiles,
  REF_SYMBOL,
  SchemaPatcher,
  convertOpenApiToJsonSchema,
  convertOpenApiParameters,
  refToPath,
  SchemaMetaInfoMap,
  JSONSchema,
  addSchemaToGenerationMap,
} from './utils';

export async function openapiToTsJsonSchema({
  openApiSchema: openApiSchemaRelative,
  definitionPathsToGenerateFrom,
  schemaPatcher,
  outputPath: providedOutputPath,
  silent,
  experimentalImportRefs = false,
}: {
  openApiSchema: string;
  definitionPathsToGenerateFrom: string[]; // @TODO validate to be relative paths
  schemaPatcher?: SchemaPatcher;
  outputPath?: string;
  silent?: boolean;
  experimentalImportRefs?: boolean;
}) {
  if (definitionPathsToGenerateFrom.length === 0 && !silent) {
    console.log(
      `[openapi-ts-json-schema] ⚠️ No schemas will be generated since definitionPathsToGenerateFrom option is empty`,
    );
  }

  const openApiSchemaPath = path.resolve(openApiSchemaRelative);
  if (!existsSync(openApiSchemaPath)) {
    throw new Error(
      `Provided OpenAPI definition path doesn't exist: ${openApiSchemaPath}`,
    );
  }

  const outputPath =
    providedOutputPath ??
    path.resolve(path.dirname(openApiSchemaPath), 'schemas-autogenerated');

  await clearFolder(outputPath);

  const openApiSchema = await fs.readFile(openApiSchemaPath, 'utf-8');
  const jsonOpenApiSchema: Record<string, any> = YAML.parse(openApiSchema);
  // Resolve external/remote references (keeping $refs)
  const bundledOpenApiSchema = await $RefParser.bundle(jsonOpenApiSchema);
  const initialJsonSchema = convertOpenApiToJsonSchema(bundledOpenApiSchema);

  const inlinedRefs: Map<string, JSONSchema> = new Map();
  const dereferencedJsonSchema = await $RefParser.dereference(
    initialJsonSchema,
    {
      dereference: {
        // @ts-expect-error onDereference seems not to be properly typed
        onDereference: (ref, inlinedSchema) => {
          if (experimentalImportRefs) {
            // Mark inlined refs with a "REF_SYMBOL" prop
            inlinedSchema[REF_SYMBOL] = ref;

            // Keep track of inline refs
            inlinedRefs.set(ref, inlinedSchema);
          } else {
            /**
             * Add a $ref comment to each inlined schema with the original ref value. Using:
             * https://github.com/kaelzhang/node-comment-json
             */
            inlinedSchema[Symbol.for('before')] = [
              {
                type: 'LineComment',
                value: ` $ref: "${ref}"`,
              },
            ];
          }
        },
      },
    },
  );

  const jsonSchema = convertOpenApiParameters(dereferencedJsonSchema);
  const schemasToGenerate: SchemaMetaInfoMap = new Map();

  // Generate schema meta info for inlined refs, first
  if (experimentalImportRefs) {
    for (const [ref, schema] of inlinedRefs) {
      const { schemaRelativeDirName, schemaName } = refToPath(ref);
      addSchemaToGenerationMap({
        schemasToGenerate,
        schemaRelativeDirName,
        outputPath,
        schemaName,
        schema,
        experimentalImportRefs,
      });
    }
  }

  // Generate schema meta info for user requested schemas
  for (const definitionPath of definitionPathsToGenerateFrom) {
    const schemas = get(jsonSchema, definitionPath);
    for (const schemaName in schemas) {
      addSchemaToGenerationMap({
        schemasToGenerate,
        schemaRelativeDirName: definitionPath,
        outputPath,
        schemaName,
        schema: schemas[schemaName],
        experimentalImportRefs,
      });
    }
  }

  await makeJsonSchemaFiles({
    schemasToGenerate,
    schemaPatcher,
  });

  if (!silent) {
    console.log(
      `[openapi-ts-json-schema] ✅ JSON schema models generated at ${outputPath}`,
    );
  }
  return { outputPath };
}
